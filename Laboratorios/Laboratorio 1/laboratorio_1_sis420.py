# -*- coding: utf-8 -*-
"""Laboratorio_1_SIS420 (3).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W0FvBIO6lLb1Relbor7oc34dPXU-Cllb

# **Laboratorio de SIS420**
**Nombre:** Rúa Echalar Juan Manuel **Carrera:** Ingeniería en Ciencias de la Computación
## Regresión lineal múltiple
"""

# Commented out IPython magic to ensure Python compatibility.
# utilizado para manejos de directorios y rutas
import os

# Computacion vectorial y cientifica para python
import numpy as np

# Librerias para graficación (trazado de gráficos)
from matplotlib import pyplot
from mpl_toolkits.mplot3d import Axes3D  # Necesario para graficar superficies 3D

# llama a matplotlib a embeber graficas dentro de los cuadernillos
# %matplotlib inline



# Cargar datos
# data = np.loadtxt(os.path.join('Datasets', 'ex1data2.txt'), delimiter=',')
data = np.loadtxt('SmartphonePrice.csv', delimiter=',')
X = data[:, :6]
y = data[:, 6]
m = y.size
print(m)
# imprimir algunos puntos de datos
print('{:>8s}{:>8s}{:>10s}'.format('X[:,0]', 'X[:, 1]', 'y'))
print('-'*26)
for i in range(10):
    print('{:8.0f}{:8.0f}{:10.0f}'.format(X[i, 0], X[i, 1], y[i]))

def  featureNormalize(X):
    X_norm = X.copy()
    mu = np.zeros(X.shape[1])
    sigma = np.zeros(X.shape[1])

    mu = np.mean(X, axis = 0)
    sigma = np.std(X, axis = 0)
    X_norm = (X - mu) / sigma

    return X_norm, mu, sigma

# llama featureNormalize con los datos cargados
X_norm, mu, sigma = featureNormalize(X)

print(X)
print('Media calculada:', mu)
print('Desviación estandar calculada:', sigma)
print(X_norm)

# Añade el termino de interseccion a X
# (Columna de unos para X0)
X = np.concatenate([np.ones((m, 1)), X_norm], axis=1)

print(X)

"""# Descenso por el gradiente"""

def computeCostMulti(X, y, theta):
    # Inicializa algunos valores utiles
    m = y.shape[0] # numero de ejemplos de entrenamiento

    J = 0

    h = np.dot(X, theta)

    J = (1/(2 * m)) * np.sum(np.square(np.dot(X, theta) - y))

    return J

def gradientDescentMulti(X, y, theta, alpha, num_iters):

    # Inicializa algunos valores
    m = y.shape[0] # numero de ejemplos de entrenamiento

    # realiza una copia de theta, el cual será acutalizada por el descenso por el gradiente
    theta = theta.copy()

    J_history = []

    for i in range(num_iters):
        theta = theta - (alpha / m) * (np.dot(X, theta) - y).dot(X)
        J_history.append(computeCostMulti(X, y, theta))

    return theta, J_history

# Elegir algun valor para alpha (probar varias alternativas)
alpha = 0.001 # alpha = 0.003
num_iters = 10000

# inicializa theta y ejecuta el descenso por el gradiente
theta = np.zeros(7)
theta, J_history = gradientDescentMulti(X, y, theta, alpha, num_iters)

# Grafica la convergencia del costo
pyplot.plot(np.arange(len(J_history)), J_history, lw=2)
pyplot.xlabel('Numero de iteraciones')
pyplot.ylabel('Costo J')

# Muestra los resultados del descenso por el gradiente
print('theta calculado por el descenso por el gradiente: {:s}'.format(str(theta)))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,85.54193161164888,512,60.92946196123948,4377.12096795211,147.19265413197596,0.38532477228989337]
X_array[1:7] = (X_array[1:7] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,49.57860657953991,64,20.438729342198773,1806.5191908867298,128.96310921816902,0.8372261869162232]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el celular (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,14.587305698214447,16,12.283367917165213,1488.1074957101018,244.39740931350943,1.1060471155077523]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el celular (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,91.83371253989026,512,139.2345690159481,5514.949822153595,124.14210690471182,1.020396790034982]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido el celular (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,54.96439421952375,256,46.6582692517232,2740.8592324580136,233.48892425908377,1.9548227014332364]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el celular (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,95.92110079724596,1024,177.6412611083463,5776.304408578959,236.95754883527275,0.3638774671720688]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el celular  (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,47.60084632485484,32,12.865383760196135,1899.8825618937592,124.6414214324207,5.9956870261873005]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el celular  (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,68.2324148720127,128,16.234747782521524,2614.6148256289425,202.37743301146668,3.6658117983132437]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el celular (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,95.4850181326681,512,97.34317373160806,4183.734407063921,183.76456656051437,1.3993418290446245]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el celular  (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1,28.98882152511959,32,13.495837187220594,1707.8448735900438,207.34325409813076,4.112585964576202]
X_array[1:10] = (X_array[1:10] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio predecido para el celular  (usando el descenso por el gradiente) es: ${:.0f}'.format(price))

"""# **Ecuación de la Normal**"""

# Cargar datos
data = np.loadtxt('SmartphonePrice.csv', delimiter=',')
X = data[:, :6]
y = data[:, 6]
m = y.size
X = np.concatenate([np.ones((m, 1)), X], axis=1)

def normalEqn(X, y):

    theta = np.zeros(X.shape[1])

    theta = np.dot(np.dot(np.linalg.inv(np.dot(X.T,X)),X.T),y)

    return theta

# Calcula los parametros con la ecuación de la normal
theta = normalEqn(X, y);

# Muestra los resultados optenidos a partir de la aplicación de la ecuación de la normal
print('Theta calculado a partir de la ecuación de la normal: {:s}'.format(str(theta)));

# Estimar el precio para una casa de superficie de 1650 sq-ft y tres dormitorios

X_array = [1,85.54193161164888,512,60.92946196123948,4377.12096795211,147.19265413197596,0.38532477228989337]
price = np.dot(X_array, theta)

print('Precio predecido para el celular (usando la ecuación de la normal): ${:.0f}'.format(price))

# Primer array
X_array1 = [1, 95.4850181326681, 512, 97.34317373160806, 4183.734407063921, 183.76456656051437, 1.3993418290446245]
price1 = np.dot(X_array1, theta)

print('El precio predecido para el primer array es: ${:.0f}'.format(price1))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1, 14.587305698214447, 16, 12.283367917165213, 1488.1074957101018, 244.39740931350943, 1.1060471155077523]
price = np.dot(X_array, theta)

print('El precio predecido es para lel celular : ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1, 91.83371253989026, 512, 139.2345690159481, 5514.949822153595, 124.14210690471182, 1.020396790034982]
price = np.dot(X_array, theta)

print('El precio predecido es para el celular : ${:.0f}'.format(price))

# Cuarto array
X_array4 = [1, 54.96439421952375, 256, 46.6582692517232, 2740.8592324580136, 233.48892425908377, 1.9548227014332364]
price4 = np.dot(X_array4, theta)

print('El precio predecido para el el celular : ${:.0f}'.format(price4))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1, 95.92110079724596, 1024, 177.6412611083463, 5776.304408578959, 236.95754883527275, 0.3638774671720688]
price = np.dot(X_array, theta)

print('El precio predecido es para el celular : ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1, 47.60084632485484, 32, 12.865383760196135, 1899.8825618937592, 124.6414214324207, 5.9956870261873005]
price = np.dot(X_array, theta)

print('El precio predecido es para el celular : ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1, 68.2324148720127, 128, 16.234747782521524, 2614.6148256289425, 202.37743301146668, 3.6658117983132437]
price = np.dot(X_array, theta)

print('El precio predecido es para el celular : ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1, 95.4850181326681, 512, 97.34317373160806, 4183.734407063921, 183.76456656051437, 1.3993418290446245]
price = np.dot(X_array, theta)

print('El precio predecido es para el celular : ${:.0f}'.format(price))

# Estimar el precio para una casa de 1650 sq-ft, con 3 dormitorios
X_array = [1, 28.98882152511959, 32, 13.495837187220594, 1707.8448735900438, 207.34325409813076, 4.112585964576202]
price = np.dot(X_array, theta)

print('El precio predecido es para el celular : ${:.0f}'.format(price))

"""# **Regresión polinomial**"""


# Commented out IPython magic to ensure Python compatibility.
# utilizado para manejos de directorios y rutas
import os

# Computacion vectorial y cientifica para python
import numpy as np

# Librerias para graficación (trazado de gráficos)
from matplotlib import pyplot
from mpl_toolkits.mplot3d import Axes3D  # Necesario para graficar superficies 3D

# llama a matplotlib a embeber graficas dentro de los cuadernillos
# %matplotlib inline

# Cargar datos
#data = np.loadtxt(os.path.join('Datasets', 'capacidad_adquisitiva.csv'), delimiter=';')
#from numpy import genfromtxt
#data = genfromtxt(os.path.join('Datasets', 'capacidad_adquisitiva.csv'), delimiter=';')
data = np.loadtxt('SmartphonePrice.csv', delimiter=",",skiprows=1)
#print(data)
X = data[:, :6]
y = data[:, 6]
m = y.size
#print(X)
#print(y)
# imprimir algunos puntos de datos
#print('{:>8s}{:>10s}'.format(X, y))
#print('-'*26)
for i in range(20):
    print('{:8.0f}{:10.0f}'.format(X[i, 0], y[i]))

print(X.shape)

def plotData(x, y):
    #Grafica los puntos x e y en una figura nueva.

    fig = pyplot.figure()  # abre una nueva figura

    pyplot.plot(x, y, 'ro', ms=10, mec='k')
    pyplot.ylabel('Edad personas')
    pyplot.xlabel('Capacidad adquisitiva 1,000s')

plotData(X, y)

X = np.concatenate([X, X * X], axis=1)

print(X.shape)

print(X)

def  featureNormalize(X):
    X_norm = X.copy()
    mu = np.zeros(X.shape[1])
    sigma = np.zeros(X.shape[1])

    mu = np.mean(X, axis = 0)
    sigma = np.std(X, axis = 0)
    X_norm = (X - mu) / sigma

    return X_norm, mu, sigma

# llama featureNormalize con los datos cargados
X_norm, mu, sigma = featureNormalize(X)

#print(X)
#print('Media calculada:', mu)
#print('Desviación estandar calculada:', sigma)
#print(X_norm)

print(mu.shape,sigma.shape)

plotData(X_norm, y)

# Añade el termino de interseccion a X
# (Columna de unos para X0)
#X_norm = np.concatenate([X_norm, X_norm * X_norm], axis=1)
X = np.concatenate([np.ones((m, 1)), X_norm], axis=1)

print(X.shape)

print(X)

"""# Descenso por el gradiente"""

def computeCostMulti(X, y, theta):
    # Inicializa algunos valores utiles
    m = y.shape[0] # numero de ejemplos de entrenamiento

    J = 0

    h = np.dot(X, theta)

    J = (1/(2 * m)) * np.sum(np.square(np.dot(X, theta) - y))

    return J

def gradientDescentMulti(X, y, theta, alpha, num_iters):

    # Inicializa algunos valores
    m = y.shape[0] # numero de ejemplos de entrenamiento

    # realiza una copia de theta, el cual será acutalizada por el descenso por el gradiente
    theta = theta.copy()

    J_history = []

    for i in range(num_iters):
        theta = theta - (alpha / m) * (np.dot(X, theta) - y).dot(X)
        J_history.append(computeCostMulti(X, y, theta))

    return theta, J_history

def exercise(x_array):
    x_array = np.insert(x_array, 0, 1)
    x_array = np.append(x_array, x_array[1:]**2)
    return x_array

# Elegir algun valor para alpha (probar varias alternativas)
alpha = 0.001
num_iters = 100000

# inicializa theta y ejecuta el descenso por el gradiente
theta = np.zeros(X.shape[1])
theta, J_history = gradientDescentMulti(X, y, theta, alpha, num_iters)

# Grafica la convergencia del costo
pyplot.plot(np.arange(len(J_history)), J_history, lw=2)
pyplot.xlabel('Numero de iteraciones')
pyplot.ylabel('Costo J')

# Muestra los resultados del descenso por el gradiente
print('theta calculado por el descenso por el gradiente: {:s}'.format(str(theta)))

# La capacidad adquisitiva de una persona de 33 años
X_array = [28.98882152511959, 32, 13.495837187220594, 1707.8448735900438, 207.34325409813076, 4.112585964576202]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('el precio del celular (usando el descenso por el gradiente): ${:.0f}'.format(price))

plotData(X[:, 1], y)
pyplot.plot(X[:, 1], np.dot(X, theta), '-')

X_array = [93.09912332079527,1024,131.41803872343513,5432.962973949297,143.66274255211658,0.5190752214762246]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [36.83338278877473,32,18.063222604610516,1866.7406908257426,239.38261973079858,0.925142481021326]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [63.7096567117414,256,39.86198930777026,2207.7074517486913,224.16306271190678,2.308163669671715]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [95.92110079724596,1024,177.6412611083463,5776.304408578959,236.95754883527275,0.3638774671720688]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [47.60084632485484,32,12.865383760196135,1899.8825618937592,124.6414214324207,5.9956870261873005]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [29.148279298838265,32,12.761827681323476,1749.3841069051357,135.26232876968376,5.24917645839197]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [75.23589639739761,256,66.51799197118548,3166.3355405334755,191.24593196690444,1.7377362344627323]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [50.164072957636385,256,20.981215635623016,2636.781478377584,191.2570478384327,3.413036519619971]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [98.09093787115147,512,161.61079461676445,5113.272910288059,209.79604571450517,0.3123695976338019]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [64.71047732906813,64,40.952827195321234,2847.7343100169323,139.90348918323792,0.470482604278335]
X_array=exercise(X_array)
X_array[1:X_array.shape[0]] = (X_array[1:X_array.shape[0]] - mu) / sigma
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array[1:X_array.shape[0]]
print(np.dot(X_array, theta))

"""# **Ecuación de la Normal**"""

# Cargar datos
data = np.loadtxt('SmartphonePrice.csv', delimiter=",",skiprows=1)
X = data[:, :6]
y = data[:, 6]
m = y.size
X_original = X.copy()
X = np.concatenate([X, X * X], axis=1)
X = np.concatenate([np.ones((m, 1)), X], axis=1)

def normalEqn(X, y):

    theta = np.zeros(X.shape[1])

    theta = np.dot(np.dot(np.linalg.inv(np.dot(X.T,X)),X.T),y)

    return theta

def exercise(x_array):
    x_array = np.insert(x_array, 0, 1)
    x_array = np.append(x_array, x_array[1:]**2)
    return x_array

# Calcula los parametros con la ecuación de la normal
theta = normalEqn(X, y);

# Muestra los resultados optenidos a partir de la aplicación de la ecuación de la normal
print('Theta calculado a partir de la ecuación de la normal: {:s}'.format(str(theta)));

# Estimar el precio para una casa de superficie de 1650 sq-ft y tres dormitorios

X_array = [28.98882152511959, 32, 13.495837187220594, 1707.8448735900438, 207.34325409813076, 4.112585964576202]
X_array= exercise(X_array)
price = np.dot(X_array, theta)

print('Precio del celular (usando la ecuación de la normal): ${:.0f}'.format(price))

X_array = [93.09912332079527,1024,131.41803872343513,5432.962973949297,143.66274255211658,0.5190752214762246]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [36.83338278877473,32,18.063222604610516,1866.7406908257426,239.38261973079858,0.925142481021326]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [63.7096567117414,256,39.86198930777026,2207.7074517486913,224.16306271190678,2.308163669671715]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [95.92110079724596,1024,177.6412611083463,5776.304408578959,236.95754883527275,0.3638774671720688]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [47.60084632485484,32,12.865383760196135,1899.8825618937592,124.6414214324207,5.9956870261873005]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [29.148279298838265,32,12.761827681323476,1749.3841069051357,135.26232876968376,5.24917645839197]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [75.23589639739761,256,66.51799197118548,3166.3355405334755,191.24593196690444,1.7377362344627323]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [50.164072957636385,256,20.981215635623016,2636.781478377584,191.2570478384327,3.413036519619971]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [98.09093787115147,512,161.61079461676445,5113.272910288059,209.79604571450517,0.3123695976338019]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

X_array = [64.71047732906813,64,40.952827195321234,2847.7343100169323,139.90348918323792,0.470482604278335]
X_array=exercise(X_array)
price = np.dot(X_array, theta)   # Se debe cambiar esto

print('El precio del celular es (usando el descenso por el gradiente): ${:.0f}'.format(price))

plotData(X[:, 1], y)
#X = np.concatenate([np.ones((m, 1)), X], axis=1)
#X = np.concatenate([X, X * X], axis=1)

pyplot.plot(X[:, 1], np.dot(X, theta), '-')